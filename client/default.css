:root {
  --main-bg-color: whitesmoke;
  --lighter-bg-color: white;
  --darker-bg-color: gainsboro;
  --main-fg-color: rgb(20, 20, 20);
  --lighter-fg-color: rgb(80, 80, 80);
  --red: crimson;
  --blue: navy;
  --green: darkolivegreen;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  border: 0;
}

input[type=text],
button,
select {
  padding: 0.8rem 0.3rem;
  border: 0.1rem solid var(--main-fg-color);
}

textarea {
  padding: 0.3rem 0.3rem;
  border: 0.1rem solid var(--main-fg-color);
}

button,
select {
  cursor: pointer;
  background: var(--main-bg-color);
  padding: 1rem;
}

button:active {
  background: var(---lighter-bg-color);
}

body {
  height: 100vh;
  width: 100vw;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--darker-bg-color);
  color: var(--main-fg-color);
}

.card {
  height: max-content;
  width: max-content;
  background: var(--lighter-bg-color);
  margin: 1rem;
  padding: 0 3rem;
  box-shadow: 0 0 0.2rem var(--main-fg-color);
  border-radius: 0.2rem;
}

.card > h1 {
  font-size: 1.5rem;
  color: var(--lighter-fg-color);
}

.number-input {
  display: grid;
  column-gap: 1rem;
  grid-template-columns: 3rem 3rem 3rem;
  height: 3rem;
  width: max-content;
  margin: 0 auto;
}

.number-input > button,
.number-input > input {
  padding: 0.5rem;
  height: inherit;
}

.number-input > button {
  font-size: 1.3rem;
}

#wrapper.config           > :not(#config, nav)           { display: none; }
#wrapper.manual-translate > :not(#manual-translate, nav) { display: none; }
#wrapper.auto-translate   > :not(#auto-translate, nav)   { display: none; }
#wrapper.logs             > :not(#logs, nav)             { display: none; }

#wrapper {
  display: grid;
  grid-template-columns: 3rem auto;
  height: 100%;
  max-height: 60rem;
  width: inherit;
  max-width: 110rem;
  background: var(--main-bg-color);
  border-radius: 2rem;
  overflow: hidden;
}

nav {
  display: flex;
  flex-direction: column;
  width: 3rem;
  height: inherit;
  justify-content: center;
  background: var(--lighter-bg-color);
  height: 100%;
}

.nav-item {
  padding: 1rem 0;
  margin: 0.3rem 0;
  font-size: 1.3rem;
  width: 100%;
  cursor: pointer;
  text-align: center;
}

.nav-item.selected {
  background-color: var(--darker-bg-color);
}

#auto-translate {
  display: flex;
  margin: 0 auto;
  flex-wrap: wrap;
  justify-content: space-around;
  align-content: center;
  overflow: auto;
}

#config {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  overflow: auto;
}

#config > .card {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  padding: 2em;
  width: 40em;
  max-width: 90%;
}

#config-params {
  display: grid;
  grid-template-columns: 1fr 1fr;
  row-gap: 1em;
  column-gap: 1em;
  width: min-content;
  margin: 1.5em 0;
}

#config-params > label {
  white-space: nowrap;
  position: relative;
  top: 0.5em;
}

#translate-server-address-preview::before {
  content: 'Preview: ';
  color: var(--main-fg-color);
}

#translate-server-address-current::before {
  content: 'Current translator address: ';
  color: var(--main-fg-color);
}

#translate-server-address-current {
  font-weight: bold;
}

#translate-server-address-preview,
#translate-server-address-current {
  grid-column-start: 1;
  grid-column-end: 3;
  color: var(--blue);
}

#manual-translate {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
}

#manual-translate > div {
  display: grid;
  row-gap: 1rem;
  column-gap: 1rem;
  width: 60rem;
  max-width: 100%;
  height: max-content;
  padding: 2rem;
  grid-template-areas:
    "title title"
    "textLabel translationLabel"
    "textContent translationContent"
    "textContent translationContent"
    ". languageSelector";
}

#manual-translate > div > h1                            { grid-area: title; }
#manual-translate > div > label[for=text-to-translate]  { grid-area: textLabel; }
#manual-translate > div > #text-to-translate            { grid-area: textContent; }
#manual-translate > div > #translated-text              { grid-area: translationContent; }
#manual-translate > div > label[for=translated-text]    { grid-area: translationLabel; }
#manual-translate > div > label[for=language-selector]  { grid-area: translationLabel; }
#manual-translate > div > #language-selector            { grid-area: languageSelector; }

#manual-translate > div > textarea {
  overflow: auto;
  resize: none;
}

#manual-translate > div > #translated-text {
  background: var(--main-bg-color);
  cursor: default;
}

#auto-translate input[type=number] {
  width: 3rem;
}

#language-selector {
  width: 10rem;
}

#auto-translate > #stress-test {
  display: grid;
  row-gap: 1rem;
  column-gap: 1rem;
  grid-template-columns: 1fr 1fr;
  width: 30rem;
  max-width: 100%;
  height: 15rem;
  padding: 2rem;
  grid-template-areas:
    "title title"
    "numClientsLabel durationLabel"
    "numClientsControl durationControl"
    "startStop startStop";
}

#auto-translate > #stress-test > label[for=num-clients-control]           { grid-area: numClientsLabel; }
#auto-translate > #stress-test > label[for=stress-test-duration-control]  { grid-area: durationLabel; }
#auto-translate > #stress-test > #num-clients-control                     { grid-area: numClientsControl; }
#auto-translate > #stress-test > #stress-test-duration-control            { grid-area: durationControl; }
#auto-translate > #stress-test > #start-stress-test                       { grid-area: startStop; }
#auto-translate > #stress-test > #stop-stress-test                        { grid-area: startStop; }

#auto-translate > #stress-test > #start-stress-test,
#auto-translate > #stress-test > #stop-stress-test,
#auto-translate > #stress-test > label {
  width: max-content;
  margin: 0 auto;
}

#auto-translate > #all-languages {
  display: grid;
  row-gap: 1rem;
  column-gap: 1rem;
  grid-template-columns: 1fr;
  grid-template-rows: repeat(4, auto);
  width: 30rem;
  max-width: 100%;
  height: 15rem;
  padding: 2rem;
}

#auto-translate > #all-languages > #start-all-languages-test {
  margin: 0 auto;
  width: max-content;
}

#stats-card > h1 {
  padding: 0.8rem 0;
}

#auto-translate > #stats-card > #simulation-stats {
  display: flex;
  justify-content: space-around;
  width: 30rem;
  height: 15rem;
}

#auto-translate > #stats-card > #simulation-stats > #translations-pie {
  height: 10rem;
  width: 10rem;
  margin: auto;
}

#auto-translate > #stats-card > #simulation-stats > #stat-labels {
  width: 50%;
  margin: auto 0;
}

#auto-translate > #all-languages > #start-all-languages-test,
#auto-translate > #all-languages > #stop-all-languages-test,
#auto-translate > #all-languages-test > label {
  width: max-content;
  margin: 0 auto;
}

#logs {
  overflow: auto;
}

.simulationLogRow {
  display: grid;
  grid-template-areas:
    'startTime duration .'
    'translatorAddress . .'
    'totalRequested totalReceived avgResponseTime'
    'clientLogsHeading . .'
    'clientLogs clientLogs clientLogs'
  ;
  margin: 2rem 1rem;
  padding: 0.5rem;
  background-color: var(--lighter-bg-color);
  width: calc(90% + 5rem);
  max-width: 95%;
  border: solid 0.1rem var(--main-fg-color);
  margin: 2rem auto;
}

/* simulation grid area placement & positioning */
.simulationLogRow > .startTime { grid-area: startTime; }
.simulationLogRow > .duration { grid-area: duration; }
.simulationLogRow > .translatorAddress { grid-area: translatorAddress; }
.simulationLogRow > .totalTranslationsRequested { grid-area: totalRequested; }
.simulationLogRow > .totalTranslationsReceived { grid-area: totalReceived; }
.simulationLogRow > .averageResponseTime { grid-area: avgResponseTime; }
.simulationLogRow > .clientLogsHeading { grid-area: clientLogsHeading; }
.simulationLogRow > .clientLogs { grid-area: clientLogs; }

/* simulation pseudo classes for labels */
.simulationLogRow > .translatorAddress::before { content: 'Translator address: '; }
.simulationLogRow > .duration::before { content: 'Duration: '; }
.simulationLogRow > .duration::after { content: ' (Seconds)'; }
.simulationLogRow > .totalTranslationsRequested::before { content: 'Translations Requested: '; }
.simulationLogRow > .totalTranslationsReceived::before { content: 'Translations Received: '; }
.simulationLogRow > .averageResponseTime::before { content: 'Average Response Time: '; }

.clientLogsHeading {
  font-weight: bold;
  font-size: 1.4rem;
  cursor: pointer;
}

.clientLogsHeading::after {
  content: ' ˇ';
  top: 0.5em;
  position: relative;
}

.clientLogsHeading.selected::after {
  content: ' ^';
}

/* styling to expand & collapse client logs */
.simulationLogRow > .clientLogs {
  max-height: 0;
  overflow: hidden;
}

.simulationLogRow > .clientLogsHeading.selected ~ .clientLogs {
  max-height: 1000rem;
  animation: expand 1s forwards;
}

@keyframes expand {
  0% { max-height: 0; }
  90% { max-height: 100vh; }
  100% { max-height: 1000rem; }
}

/* client grid area placement & positioning */

.clientLogs {
  display: flex;
  flex-direction: column;
}

.clientLogRow:first-of-type {
  font-weight: bold;
}

.clientLogRow {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: auto auto;
}

.translationLogsHeading::after {
  content: ' ˇ';
  top: 0.5em;
  position: relative;
}

.translationLogsHeading.selected::after {
  content: ' ^';
}

.clientLogRow.selected::after,
.clientLogRow::after {
  top: 0.6em;
  position: relative;
  line-height: 0.7em;
  font-size: 1.5em;
}

/* Translation logs */

.translationLogs {
  /* child properties */
  overflow: hidden;
  grid-column-start: 1;
  grid-column-end: 5;

  /* parent properties */
  display: flex;
  flex-direction: column;

  /* other properties */
  height: 0;
  width: calc(80% + 5em);
}

.translationLogsHeading.selected ~ .translationLogs {
  height: auto;
  margin: 2em auto;
  border-top: 0.1em solid var(--main-fg-color);
  border-bottom: 0.1em solid var(--main-fg-color);
}

.translationLogRow {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  margin: 0.8em 0;
  padding: 0 0.8rem 0.2rem 0.8rem;
  border-bottom: 0.1rem dashed var(--main-fg-color);
}

.noTranslation {
  color: var(--red);
  font-style: italic;
}

.translationLogRow:first-of-type {
  font-weight: bold;
}
